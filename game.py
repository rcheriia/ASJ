# Импортируемые модули
from time import sleep
from random import choice
import turtle

# Функция для вывода текста
def print_text(tx):
    for i in tx:
        print(i, end='')
        sleep(0.01)
    print()

# Приветствие и подтверждение продолжения
print_text('Привет, пyтешественник. Рад с тобой встретится! Назови своё имя:')
name = input()
print_text(f'Ты из другого мира, {name}? Давай мы начнём наше путешевествие и я расскажу про вселенную чуть подробнее?')
print_text('Продолжим? (да/нет)')
stat = input()

# При ответе иного варианта
while stat not in ['да', 'нет']:
    print_text('Продолжим? (да/нет')
    stat = input()

# Основнная функция программы
def main(stat, name):
    if stat == 'да':
        print_text(
            'Это история начинается с очень давних времён. На нашем континенте Вотоник 4 государства: земли, воды, воздуха и огня.')
        print_text(
            'Всё было прекрасно, пока одним зимним днём на праздник всех 4-х стихий не пришёл колдун и не превратил всех в камень.')
        print_text(
            'Помоги спасти всех. Для этого тебе нужно сразиться в различные игры. Они помогут определить твои софт и хард скиллы.')
        print_text('Первая игра: Виселица')
        sleep(0.5)
        print_text('Давай объясню правила игры: ')
        print_text(f'Колдун загадывает слово, а {name} должен его угадать подбирая буквы. Если же ты не угадал букву, то висельник\nс виселицей начинает всё больше прорисовываться, пока полностью не прорисуется. После прорисовки висельника с виселицей ты\nпревращаешься в камень, если же ты угадал слово до прорисовки, то в этом раунде ты обыграл колдуна.')

        # Игра виселица
        def hangman(name):
            HANGMAN = (
                """
                 ------
                 |    |
                 |
                 |
                 |
                 |
                 |
                ----------
                """,
                """
                 ------
                 |    |
                 |    O
                 |
                 |
                 |
                 |
                ----------
                """,
                """
                 ------
                 |    |
                 |    O
                 |    |
                 | 
                 |   
                 |    
                ----------
                """,
                """
                 ------
                 |    |
                 |    O
                 |   /|
                 |   
                 |   
                 |   
                ----------
                """,
                """
                 ------
                 |    |
                 |    O
                 |   /|\\
                 |   
                 |   
                 |     
                ----------
                """,
                """
                 ------
                 |    |
                 |    O
                 |   /|\\
                 |   /
                 |   
                 |    
                ----------
                """,
                """
                 ------
                 |    |
                 |    O
                 |   /|\\
                 |   / \\
                 |   
                 |   
                ----------
                """
            )

            max_wrong = len(HANGMAN) - 1
            words = (
            'Решётка', 'Квартира', 'Дельфинарий', 'Непогода', 'Вход', 'Полиция', 'Перекрёсток', 'Башня', 'Стрелка',
            'Градусник', 'Бутылка', 'Щипцы', 'Наволочка', 'Павлин', 'Карточка', 'Записка', 'Лестница', 'Переулок',
            'Сенокос', 'Рассол', 'Закат', 'Сигнализация', 'Журнал', 'Заставка', 'Тиранозавр', 'Микрофон', 'Прохожий',
            'Квитанция', 'Пауза', 'Новости', 'Скарабей', 'Серебро', 'Творог', 'Осадок', 'Песня', 'Корзина', 'Сдача',
            'Овчарка', 'Хлопья', 'Телескоп', 'Микроб', 'Угощение', 'Экскаватор', 'Письмо', 'Пришелец', 'Айсберг',
            'Пластик', 'Доставка', 'Полка', 'Билет', 'Вторник', 'Льдина', 'Интерес', 'Троллейбус', 'Футболист',
            'Лисёнок', 'Пример')  # Слова для угадывания

            # word = choice(words)
            # Слово, которое нужно угадать
            word = 'Пауза'
            so_far = "_" * len(word)  # Одна черточка для каждой буквы в слове, которое нужно угадать
            wrong = 0  # Количество неверных предположений, сделанных игроком
            used = []  # Буквы уже угаданы

            while wrong < max_wrong and so_far != word.lower():
                print(HANGMAN[wrong])  # Вывод висельника по индексу
                print("\nВы использовали следующие буквы:\n", used)
                print("\nНа данный момент слово выглядит так:\n", so_far)

                guess = input("\n\nВведите свое предположение: ")  # Пользователь вводит предполагаемую букву

                while guess in used:
                    print("Вы уже вводили букву",
                          guess)  # Если буква уже вводилась ранее, то выводим соответствующее сообщение
                    guess = input("Введите свое предположение: ")  # Пользователь вводит предполагаемую букву

                used.append(guess)  # В список использованных букв добавляется введённая буква

                if guess in word.lower():  # Если введённая буква есть в загаданном слове, то выводим соответствующее сообщение
                    print("\nДа!", guess, "есть в слове!")
                    new = ""
                    for i in range(len(word)):  # В цикле добавляем найденную букву в нужное место
                        if guess == word.lower()[i]:
                            new += guess
                        else:
                            new += so_far[i]
                    so_far = new

                else:
                    print(
                        "\nИзвините, буквы \"" + guess + "\" нет в слове.")  # Если буквы нет, то выводим соответствующее сообщение
                    wrong += 1

            if wrong == max_wrong:  # Если игрок превысил кол-во ошибок, то его повесили
                print(HANGMAN[wrong])
                print("\nКолдун повесил тебя и превратил в камень!")
                print("\nЗагаданное слово было \"" + word + '\"')
                print_text('Попробуем снова? (да/нет)')
                k = input()
                while k not in ['да', 'нет']:
                    print_text('Попробуем снова? (да/нет)')
                    k = input()
                if k == 'да':
                    hangman(name)
                if k == 'нет':
                    print_text('Ты же ещё вернёшься спасти наш мир? В любом случае, удачи тебе!')
            else:  # Если кол-во ошибок не превышено, то игрок выиграл
                print("\nЗагаданное слово было \"" + word + '\"')
                print("\nВ этом раунде ты обыграл колдуна! Пойдём дальше")

                # Функция второй игры
                def gorod(name):
                    print_text('Теперь колдун посоревнуется с тобой в знаниях географии')
                    print_text('Вторая игра: Города')
                    sleep(0.5)
                    print_text('Правила игры:')
                    print_text(
                        'Колдун начинает. Он называет город России, твоя же задача\nна последнюю букву в названии этого города назвать город, начинающийся с этой буквы. Напомню, если ты проиграешь то есть ошибёшься 3 раза,\nтебя превратят в камень. Удачи!')

                    # Игра в города
                    def play_cities(name):
                        n = 0
                         # cities = ["Москва", "Санкт-Петербург", "Новосибирск", "Екатеринбург", "Нижний Новгород",
                         #         "Казань", "Челябинск",
                         #         "Омск", "Самара", "Ростов-на-Дону", "Уфа", "Красноярск", "Пермь", "Воронеж",
                         #         "Волгоград", "Краснодар",
                         #         "Саратов", "Тюмень", "Тольятти", "Ижевск", "Барнаул", "Ульяновск", "Владивосток",
                         #         "Ярославль",
                         #         "Иркутск", "Томск", "Кемерово", "Оренбург", "Новокузнецк", "Рязань", "Астрахань",
                         #         "Набережные Челны",
                         #         "Пенза", "Липецк", "Киров", "Чебоксары", "Балашиха", "Калининград", "Тула", "Курск",
                         #         "Севастополь",
                         #         "Сочи", "Ставрополь", "Улан-Удэ", "Тверь", "Магнитогорск", "Иваново", "Брянск",
                         #         "Белгород", "Сургут",
                         #         "Владимир", "Чита", "Архангельск", "Нижний Тагил", "Симферополь", "Калуга",
                         #         "Смоленск", "Волжский",
                         #         "Саранск", "Курган", "Курган", "Вологда", "Орёл", "Череповец", "Владикавказ",
                         #         "Мурманск", "Подольск",
                         #         "Грозный", "Тамбов", "Стерлитамак", "Петрозаводск", "Кострома", "Нижневартовск",
                         #         "Новороссийск",
                         #         "Йошкар-Ола", "Химки", "Таганрог", "Комсомольск-на-Амуре", "Сыктывкар", "Нижнекамск",
                         #         "Нальчик",
                         #         "Шахты", "Дзержинск", "Орск", "Братск", "Благовещенск", "Энгельс", "Ангарск",
                         #         "Армавир", "Псков",
                         #         "Бийск", "Северодвинск", "Балаково", "Прокопьевск", "Южно-Сахалинск", "Рыбинск",
                         #         "Ачинск", "Сызрань",
                         #         "Балашов", "Норильск", "Златоуст", "Каменск-Уральский", "Мытищи", "Люберцы",
                         #         "Волгодонск", "Королёв",
                         #         "Подольск", "Миасс", "Новочеркасск", "Каменск-Шахтинский", "Нефтеюганск", "Салават",
                         #         "Железногорск",
                         #         "Ессентуки", "Серпухов", "Кисловодск", "Ковров", "Новомосковск", "Красногорск",
                         #         "Камышин", "Магадан",
                         #         "Глазов", "Жуковский", "Елец", "Артём", "Мичуринск", "Северск", "Каспийск",
                         #         "Новошахтинск",
                         #         "Евпатория", "Кропоткин", "Киселёвск", "Новотроицк", "Рубцовск", "Альметьевск",
                         #         "Североморск",
                         #         "Крымск", "Арзамас", "Сергиев Посад", "Новоуральск", "Ейск", "Абакан", "Серов",
                         #         "Новокуйбышевск",
                         #         "Елец", "Северск", "Каспийск", "Новошахтинск", "Евпатория", "Кропоткин", "Киселёвск",
                         #         "Новотроицк",
                         #         "Рубцовск", "Альметьевск", "Североморск", "Крымск", "Арзамас", "Сергиев Посад",
                         #         "Новоуральск", "Ейск",
                         #         "Абакан", "Серов", "Новокуйбышевск"]

                        cities = ["Москва", "Санкт-Петербург", "Новосибирск", 'Глазов', "Абакан"]

                        used_cities = []
                        score = {"Мagician": 0, name: 0}

                        # Основной цикл программы
                        while True:
                            computer_city = choice(cities)
                            print("Колдун:", computer_city)
                            player_city = input("Ваш город: ")

                            # При достежения 3 ошибок превращения в камень
                            if n == 2:
                                print("\nКолдун превратил тебя в камень!")
                                print_text('Попробуем снова? (да/нет)')
                                k = input()
                                while k not in ['да', 'нет']:
                                    print_text('Попробуем снова? (да/нет)')
                                    k = input()
                                if k == 'да':
                                    play_cities(name)
                                if k == 'нет':
                                    print_text('Ты же ещё вернёшься спасти наш мир? В любом случае, удачи тебе!')
                                    break

                            if player_city[0].lower() != computer_city[-1]:
                                n += 1
                                print(f"Некорректный город. Попробуй еще раз. У тебя ещё {3 - n} попытки")
                                continue

                            # Ошибка пользователя
                            if player_city in used_cities:
                                n += 1
                                print(f"Некорректный город. Попробуй еще раз. У тебя ещё {3 - n} попытки")
                                continue

                            # Добавление города пользователя в список использованных городов
                            used_cities.append(player_city)
                            score[name] += 1

                            # Вызов функции с словом для колдуна
                            computer_city = find_city(player_city, cities, used_cities)

                            # Отсутствие города на определённую букву в списке или человек назвал 3 города
                            if computer_city is None or score[name] == 3:
                                print("Колдун не знает города на эту букву. Ты победили!")

                                # Игра горячо, холодно
                                def cold_and_hot():
                                    print_text(
                                        'Вы хорошо держитесь! Поздравляю, осталось самое последнее испытание после которого вы станете героем\nнашего контенента и освободите всех от камня.')
                                    print_text('Последняя игры: холодно, горячо')
                                    sleep(0.5)
                                    print_text(
                                        'Есть поле 10х20. В одной определённой точке стоит сердце волшебника, найдя которое вы победите его окончательно.\nВам необходимо вводить координаты сердца таким образом:\nномер строки пробел номер столбца. Например: 15 20. У вас будет 15 попыток.\nЖелаем удачи!')
                                    print_text('Что ж, начнём')

                                    # Создание матрицы
                                    mat = [[' '] * 21 for _ in range(11)]

                                    for x in range(1, 10):
                                        for y in range(1, 20):
                                            mat[x][y] = 'x'

                                    # Создание рамок в матрице
                                    for i in range(1, 10):
                                        mat[i][20] = '|'
                                        mat[i][0] = '|'

                                    for i in range(1, 20):
                                        mat[0][i] = '—'
                                        mat[10][i] = '—'

                                    # Вывод матрицы
                                    for x in range(11):
                                        for y in range(21):
                                            print(mat[x][y], end='')
                                        print()

                                    # Создание рандомных координат
                                    heart_x, heart_y = choice(range(10)), choice(range(20))

                                    # Функция отпределения температуры
                                    def temperature(degree):
                                        temp = ''
                                        if degree in range(16, 21):
                                            temp = 'Мороз морозом'

                                        if degree in range(10, 16):
                                            temp = 'Очень холодно'

                                        if degree in range(6, 10):
                                            temp = 'Холодно'

                                        if degree in range(3, 6):
                                            temp = 'Тепло'

                                        if degree in range(1, 3):
                                            temp = 'Горячо'

                                        return temp

                                    # Основной цикл игры
                                    col = 0
                                    for i in range(1, 16):
                                        col += 1
                                        coo = input('Введите предположение: ')
                                        x_user, y_user = list(map(int, coo.split()))
                                        difference_x = abs(heart_x - x_user)
                                        difference_y = abs(heart_y - y_user)

                                        # Пользователь угадал строку
                                        if heart_x == x_user and heart_y != y_user:
                                            for i in range(1, 20):
                                                mat[x_user][i] = '0'
                                            for x in range(11):
                                                for y in range(21):
                                                    print(mat[x][y], end='')
                                                print()
                                            print_text('Вы угадали строку')
                                            print(f'Ваша догадка на y: {temperature(difference_y)}')

                                        # Пользователь угадал столбец
                                        if heart_y == y_user and heart_x != x_user:
                                            for i in range(1, 10):
                                                mat[i][y_user] = '0'
                                            for x in range(11):
                                                for y in range(21):
                                                    print(mat[x][y], end='')
                                                print()
                                            print_text('Вы угадали столбец')
                                            print(f'Ваша догадка на х: {temperature(difference_x)}')

                                        # Победа пользователя
                                        if heart_y == y_user and heart_x == x_user:
                                            print_text(
                                                'Ура! Спасибо тебе огромное! Ты смог его победить! Таких как ты героев у нас ещё не было.\nТвой подвиг должен быть вознаграждён. Вот тебе медалька')

                                            # Рисунок медальки в случае победы
                                            tr = turtle.Turtle()
                                            tr.pensize(80)
                                            tr.color('red')
                                            tr.goto(-200, 240)

                                            turtle.penup()
                                            tr.goto(200, 240)
                                            turtle.pendown()
                                            tr.goto(0, -70)

                                            # Рисуем медальку
                                            tr.pensize(120)
                                            tr.color("yellow")
                                            tr.penup()
                                            tr.goto(0, -70)
                                            tr.pendown()
                                            tr.circle(50)
                                            sleep(5)
                                            break

                                        # Вывод температуры
                                        if x_user != heart_x and y_user != heart_y:
                                            print(f'Ваша догадка на х: {temperature(difference_x)}')
                                            print(f'Ваша догадка на у: {temperature(difference_y)}')

                                        # Проигрыш игрока
                                        if col == 15:
                                            print("Колдун превратил тебя в камень!")
                                            print_text('Попробуем снова? (да/нет)')
                                            k = input()
                                            while k not in ['да', 'нет']:
                                                print_text('Попробуем снова? (да/нет)')
                                            if k == 'да':
                                                cold_and_hot(name)
                                            if k == 'нет':
                                                print_text(
                                                    'Ты же ещё вернёшься спасти наш мир? В любом случае, удачи тебе!')
                                                break

                                # Вызов игры горячо, холодно
                                cold_and_hot()
                                break

                            # Добавление в список использованных слов
                            used_cities.append(computer_city)
                            score["Мagician"] += 1

                    # Функции поиска слова на последнюю букву
                    def find_city(city, cities, used_cities):
                        last_letter = city[-1].lower()
                        ch = -2

                        # Поиск последней разрешённой буквы
                        while last_letter in ['ъ', 'ь', 'ы', 'й', 'е', 'и']:
                            last_letter = city[ch].lower()
                            ch -= 1

                        # Перебор всех названий городов
                        for c in cities:
                            # Поиск слова
                            if c[0].lower() == last_letter and c not in used_cities:
                                return c

                        # Иначе возращение пустого значения
                        return None

                    # Вызов игры в города
                    play_cities(name)

                # Вызов блока с игрой в города
                gorod(name)

        # Вызов иргы виселица
        hangman(name)

# Пользователь не хочет начинать приключение
    elif stat == 'нет':
        print_text('Я зол на тебя!')
        print_text('Ты в конце концов мог бы подружиться с колдуном, а не злить его. Но тебя встретила участь')
        print_text('умереть от его рук. Может начнём всё сначала? (да/нет)')
        sta = input()

# Пользователь согласен продолжить
        if sta == 'да':
            main(name)

# Пользователь не хочет дружить окончательно
        else:
            print_text('Я давал тебе шанс, но ты не воспользовался им')

main(stat, name)